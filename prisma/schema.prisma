// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//Enums
enum user_role {
  coordinator
  board
  teacher
  student
}

enum gender_enum {
  male
  female
}

enum attendance_enum {
  present
  absent
  justified_absent
  tardy
}

// Models
model users {
  user_id   String    @id @default(uuid())
  user_name String    @unique
  email     String    @unique
  password  String
  role      user_role?
  
  teachers  teachers?
  students  students?
}

model quarters {
  quarter_id  String @id @default(uuid())
  name String
  start_date DateTime
  end_date DateTime
  break_dates DateTime[]

  classroom classrooms[]
}

model classDates {
  dates_id String @id @default(uuid())
  date DateTime
  type String?
  classroom_id String

  classroom classrooms @relation(fields: [classroom_id], references: [classroom_id])
}

model teachers {
  teacher_id  String    @id @default(uuid())
  first_name  String
  last_name   String
  email       String    @unique
  phone       String
  gender      gender_enum
  birth_date  DateTime
  country     String
  user_id     String    @unique
  user        users     @relation(fields: [user_id], references: [user_id])
  
  classrooms  classrooms[]
}

model students {
  student_id   String    @id @default(uuid())
  first_name   String
  last_name    String
  email        String    @unique
  phone        String
  gender       gender_enum
  birth_date   DateTime
  country      String
  address      String
  parent_name  String
  parent_phone String
  user_id      String    @unique
  user         users     @relation(fields: [user_id], references: [user_id])

  classroomStudents classroomStudents[]
  attendance        attendance[]
  grading           grading[]
}

model classrooms {
  classroom_id String      @id @default(uuid())
  name         String
  level        String
  days         String[]
  time         String
  schedule     DateTime[]
  teacher_id   String
  quarter_id  String
  dates_id    String
  teacher      teachers   @relation(fields: [teacher_id], references: [teacher_id])
  quarter      quarters   @relation(fields: [quarter_id], references: [quarter_id])

  
  classroomStudents classroomStudents[]
  attendance        attendance[]
  grading           grading[]
  dates             classDates[]
}

model attendance {
  attendance_id String    @id @default(uuid())
  date          DateTime
  value         attendance_enum
  student_id    String
  classroom_id  String
  student       students  @relation(fields: [student_id], references: [student_id])
  classroom     classrooms @relation(fields: [classroom_id], references: [classroom_id])

  @@unique([date, student_id])
}

model grading {
  grading_id      String    @id @default(uuid())
  period          String
  year            String
  listening       Int
  reading         Int
  writing         Int
  speaking        Int
  grammar_vocab   Int
  project         Int
  conversation    Int
  teacher_comment String
  student_id      String
  classroom_id    String
  student         students  @relation(fields: [student_id], references: [student_id])
  classroom       classrooms @relation(fields: [classroom_id], references: [classroom_id])
}

model classroomStudents {
  classroom_id String
  student_id   String
  classroom    classrooms @relation(fields: [classroom_id], references: [classroom_id])
  student      students   @relation(fields: [student_id], references: [student_id])
  
  @@id([classroom_id, student_id])
  @@unique([classroom_id, student_id])
}
